import csvParser from 'csv-parser';
import * as fs from 'fs';
import Csv from '../db-models/csv.model';
import { uuid } from 'uuidv4';
import { providers, apiResponseWrapper } from './../helpers/index';

/**
 * @description get all the records from the Csv schema
 * @returns promise with the Csv schema dataset
 */
export async function getAll() {
  return new Promise((resolve, reject) => {
    Csv.find({}).then(response => {
      resolve(apiResponseWrapper(response, true, null));
    }).catch(error => {
      reject(apiResponseWrapper(null, false, error));
    });
  });
}

/**
 * @description sanitize the data of one specific row/record from the csv file
 * @param row row/record from the csv file formatted in json object
 * @param columns set of columns used to evaluate the row/record
 * @returns same row/record with sanitized data
 */
const sanitizeCsv = (row, columns) => {
  for(const key in row) {
    if (!columns.includes(key)) {
      delete row[key];
    }
  }

  columns.forEach((column) => {
    if (!Object.prototype.hasOwnProperty.call(row, column)) {
      row[column] = 'data not provided';
    }
  });
  return row;
}

/**
 * 
 * @param record row/record from the csv file formatted in json object
 * @param columns set of columns used to evaluate the row/record
 * @returns same row/record with sanitized data and the autogenerated UUID property
 */
export const processRecord = (record, columns) => {
  const r = sanitizeCsv(record, columns);
  r['UUID'] = uuid();
  return r;
}

/**
 * 
 * @param data dataset of records to insert into database
 * @param resolve inbuild function to return the inserted data
 * @param reject inbuild function to return error message
 */
const insertRecordsToDatabase = (data, resolve, reject) => {
  Csv.insertMany(data).then(response => {
    resolve(apiResponseWrapper(response, true, null));
  }).catch(error => {
    reject(apiResponseWrapper(null, false, error));
  });
}

/**
 * 
 * @param providerName used to choose the provider columns dataset
 */
const getProviderColumns = (providerName: string) => {
  const providerColumns = providers[providerName];
  const columns = providerColumns ? providerColumns : providers['default'];
  return columns;
}

/**
 * 
 * @param providerName used to choose the provider columns dataset
 * @param filePath path of the generated csv file
 */
export const processCsv = (providerName: string, filePath: string) => {
  const columns = getProviderColumns(providerName);
  const response = [];
  return new Promise((resolve, reject) => {
    fs.createReadStream(filePath)
    .on('error', reject)
    .pipe(csvParser())
    .on('data', record => {
      const row = processRecord(record, columns);
      response.push(row);
    })
    .on('end', () => {
      insertRecordsToDatabase(response, resolve, reject);
    });
  });
}

/**
 * 
 * @param providerName used to choose the provider columns dataset
 * @param file the file sent by the user
 */
export function validateRequest(providerName, file) {
  if (!providerName) {
    return apiResponseWrapper(null, false, 'providerName is a required field.')
  }

  if (Object.keys(file).length === 0 || !file['path']) {
    return apiResponseWrapper(null, false, 'csv file is a required field.');
  }

  return apiResponseWrapper(null, true, null);
}